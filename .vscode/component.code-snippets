{
  "Next Layout": {
    "prefix": "next-layout",
    "body": [
      "",
      "export default async function Layout({",
      "  children,",
      "}: Readonly<{",
      "  children: React.ReactNode;",
      "}>) {",
      "  return <>{children}</>",
      "};",
      ""
    ],
    "description": "Next Layout"
  },
  "Next Page": {
    "prefix": "next-page",
    "body": [
      "export const runtime = 'edge';",
      "",
      "type PageProps = {",
      "  params: { [key: string]: string | undefined };",
      "  searchParams: { [key: string]: string | string[] | undefined };",
      "};",
      "",
      "export default async function Page({ params, searchParams }: Readonly<PageProps>) {",
      "  return (",
      "    <section>",
      "      $2",
      "    </section>",
      "  )",
      "};",
      "",
      ""
    ],
    "description": "Next Page"
  },

  "Next Component": {
    "prefix": "next-component",
    "body": [
      "import { cn } from '@/lib/utils';",
      "",
      "type Props = React.HTMLAttributes<HTMLElement> ",
      "",
      "export const ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} = ({ className }: Readonly<Props>) => {",
      "  return (",
      "    <div className={cn('$2', className)}>",
      "      $3",
      "    </div>",
      "  )",
      "};",
      "",
      ""
    ],
    "description": "Next Component"
  },

  "Create Context": {
    "prefix": "next-context",
    "body": [
      "'use client'",
      "",
      "import { createContext, useContext } from 'react';",
      "",
      "type ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}ContextType = {}",
      "const ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Context = createContext<${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}ContextType | null>(null);",
      "",
      "export const use${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Context = () => {",
      "  const context = useContext(${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Context);",
      "  if(!context) {",
      "    throw new Error('${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Context Error');",
      "  }",
      "  return context",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}ContextProvider = ({ children }: Readonly<{ children: React.ReactNode }>) => {",
      "  return <${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Context.Provider value={{}}>{children}</${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Context.Provider>",
      "}"
    ]
  },

  "Use Client": {
    "prefix": "use-client",
    "body": ["'use client'"],
    "description": "use client"
  },

  "Use Server": {
    "prefix": "use-server",
    "body": ["'use server'"],
    "description": "use server"
  },
  "Runtime Edge": {
    "prefix": "runtime-edge",
    "body": ["export const runtime = 'edge'"],
    "description": "runtime edge"
  },

  "Use Metadata": {
    "prefix": "next-meta",
    "body": ["export const metadata: Metadata = {$1}"],
    "description": "Define Next Metadata"
  },

  "Use Dynamic Metadata": {
    "prefix": "next-d-meta",
    "body": [
      "export async function generateMetadata(",
      "  { params, searchParams }: Readonly<PageProps>,",
      "  parent: ResolvingMetadata,",
      "): Promise<Metadata> {",
      "  return $1",
      "}"
    ],
    "description": "Define Dynamic Next Metadata"
  }
}
